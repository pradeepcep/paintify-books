import json
import os
import random
import tempfile
import traceback
from datetime import datetime

import openai
import requests
from requests_oauthlib import OAuth1Session


TWITTER_API_KEY = os.environ['TWITTER_API_KEY']
TWITTER_API_SECRET = os.environ['TWITTER_API_SECRET']
TWITTER_BOT_ACCESS_TOKEN = os.environ['TWITTER_BOT_ACCESS_TOKEN']
TWITTER_BOT_ACCESS_SECRET = os.environ['TWITTER_BOT_ACCESS_SECRET']


openai.api_key = os.environ['OPENAI_API_KEY']


def get_book_stuff():
    # Choose a random book.
    print(f'\nPicking a random book...')
    with open('books.json', 'r') as books_file:
        books = json.load(books_file)
        random_book = random.choice(books)
        random_file = random.choice(random_book['files'])
        print(f'\nPicked {random_book["name"]}, by {random_book["author"]}, file {random_file}...')

        # Choose a random starting point in the book.
        with open(os.path.join(random_book["local_path"], random_file), 'r') as book_text_file:
            total_lines = 0
            for line in book_text_file:
                total_lines += 1

            start_line = random.randint(1, total_lines - 100)  # -100 is just a shortcut to avoid EOF

        # Read a block of text and return it.
        # Closing and re-opening a file is faster than seeking to 0 in case of large files.
        print(f'\nStarting to read from line {start_line}...')
        with open(os.path.join(random_book['local_path'], random_file), 'r') as book_text_file:
            this_line = 0
            for line in book_text_file:
                this_line += 1
                if this_line < start_line:
                    continue
                if line.strip() == '':  # empty line denotes paragraph boundry
                    break

            length_threshold = 1200
            hard_length_limit = 3000
            raw_text = ''
            for line in book_text_file:
                raw_text = f'{raw_text} {line.strip()}'.strip()
                # Break at paragraphs to have the prompt generated at the later be more cohesive.
                if len(raw_text) >= length_threshold and line.strip() == '':
                    break

            print(f'\nFound a block of random text: {raw_text[:200]}...')
            return {
                'name': random_book['name'],
                'author': random_book['author'],
                'text': raw_text,
            }


def generate_scene_prompt(text_from_book):
    prompt_prefix = 'Describe this scene from a book to a painter so they can paint it:\n\n'
    print(f'\nGenerating scene prompt with text: {text_from_book[:200]}...')
    completion = openai.Completion.create(
        model='text-davinci-003',
        prompt=f'{prompt_prefix}{text_from_book}',
        max_tokens=256,
    )
    return completion['choices'][0]['text'].strip()


def generate_images_for_prompt(prompt):
    print(f'\nGenerating image using prompt: {prompt}...')
    image = openai.Image.create(
        prompt=prompt,
        n=1,
        size='1024x1024',
    )
    return image['data'][0]['url']


def tweet(text_from_book, book_name, book_author, image_url):
    print(f'\nDownloading image: {image_url}...')
    with requests.get(image_url, stream=True) as image:
        # Ref. https://stackoverflow.com/a/16696317/3186769.
        # Download the image generated by OpenAI.
        image.raise_for_status()
        image_file = tempfile.NamedTemporaryFile()
        print(f'\nCopying image to file: {image_file.name}...')
        for chunk in image.iter_content(chunk_size=None):
            image_file.write(chunk)
        image_file.seek(0)

        # Upload it to Twitter.
        print(f'\nUploading image to Twitter...')
        session = OAuth1Session(
            TWITTER_API_KEY,
            TWITTER_API_SECRET,
            resource_owner_key=TWITTER_BOT_ACCESS_TOKEN,
            resource_owner_secret=TWITTER_BOT_ACCESS_SECRET,
        )
        media_upload_response = session.post(
            'https://upload.twitter.com/1.1/media/upload.json',
            files={'media': image_file},
        )
        image_file.close()
        if not media_upload_response.ok:
            raise Exception(f'Media upload to Twitter failed: {media_upload_response.text}')

        # Attach uploaded image to a tweet and post it.
        tweet_text = f'"{text_from_book[:160]}..."\n\nâ€” {book_name}, by {book_author}\n\n#PaintingsFromBooks #PaintifyBooks'
        media_id = media_upload_response.json()['media_id_string']
        print(f'\nTweeting with attached media_id: {media_id}...')
        tweet_response = session.post(
            'https://api.twitter.com/1.1/statuses/update.json',
            data={'status': tweet_text, 'media_ids': media_id},
        )
        if not tweet_response.ok:
            raise Exception(f'Tweeting failed: {tweet_response.text}')


def run():
    random.seed(os.urandom(64))
    print(f'\nRun start: {datetime.utcnow().isoformat()}')
    book = get_book_stuff()
    image_prompt = generate_scene_prompt(book['text'])
    image_url = generate_images_for_prompt(image_prompt)
    tweet(book['text'], book['name'], book['author'], image_url)
    print(f'\nRun complete: {datetime.utcnow().isoformat()}')


if __name__ == '__main__':
    run()
